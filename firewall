#!/bin/bash

# Maintainer: Dustin Falgout <dustin@falgout.us>
# Author:     Bernhard MÃ¤ser <bernhard.maeser@scale-it.at>

#################################################################

## PLACE THIS FILE at /usr/bin/firewall
## MAKE SURE ITS EXECUTABLE (chmod 755 /usr/bin/firewall)

#################################################################
## BEWARE:
## WE ALLOW ALL --OUTPUT-- TRAFFIC BY DEFAULT
#################################################################

IPTABLES=iptables
IP6TABLES=ip6tables

_iptables() {
    ${IPTABLES} "$@"
    ${IP6TABLES} "$@"
}

case "$1" in
    start)

        #################################################################
        # source configuration
        #################################################################
        if [ -f /etc/firewall/firewall.conf ] ; then
            source /etc/firewall/firewall.conf
        else 
            echo "no configuration-file found in /etc/firewall/firewall.conf"
            echo "aborting, firewall NOT startet"
            exit 1
        fi

        echo "starting firewall..."

        ## DELETE OLD RULES
        _iptables -F
        _iptables -X

        #################################################################
        # DEFAULT POLICIES
        #################################################################

        _iptables -P INPUT DROP
        _iptables -P OUTPUT ACCEPT

        #################################################################
        # CUSTOM CHAINS
        #################################################################

        ## portscan drop
        _iptables -N portscan_drop
        _iptables -A portscan_drop -m limit --limit 60/m -j LOG --log-prefix "PORTSCAN DETECTED"
        _iptables -A portscan_drop -j DROP

        ## invalid drop
        _iptables -N invalid_drop
        _iptables -A invalid_drop -m state --state INVALID -m limit --limit 60/m -j LOG --log-prefix "INVALID PACKAGE"
        _iptables -A invalid_drop -m state --state INVALID -j DROP

        #################################################################
        # IPv4 FORWARDING 
        #################################################################

        if $ipv4_forwarding; then
            $IPTABLES -P FORWARD ACCEPT
            ## enable IPv4 forwarding ( ! overwrites sysctl settings ! )
            echo 1 > /proc/sys/net/ipv4/ip_forward
        else
            ## drop IPv4 forwarding
            $IPTABLES -P FORWARD DROP
            ## disable IPv4 forwarding ( ! overwrites sysctl settings ! )
            echo 0 > /proc/sys/net/ipv4/ip_forward
            echo 0 > /proc/sys/net/ipv4/conf/all/forwarding
            echo 0 > /proc/sys/net/ipv4/conf/default/forwarding
        fi

        #################################################################
        # ALLOW DEFAULTS
        #################################################################

        ## allow anything on loopback
        _iptables -A INPUT -i lo -j ACCEPT
        _iptables -A OUTPUT -o lo -j ACCEPT

        ## allow ICMP
        _iptables -A INPUT -p icmp -j ACCEPT

        ## allow all packets that already have a connection
        _iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
        _iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

        ##################################################################
        # EXTERNAL CONFIGS
        ##################################################################

        # CREATE PRE FILTER FOR DOCKER
        if $enable_docker; then
            # Create a PRE_DOCKER table
            _iptables -N PRE_DOCKER
            # Insert this as the first table on the FORWARD chain.
            _iptables -I FORWARD -o docker0 -j PRE_DOCKER
            # Docker internal use
            _iptables -A PRE_DOCKER -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
            _iptables -A PRE_DOCKER -i docker0 ! -o docker0 -j ACCEPT
            _iptables -A PRE_DOCKER -m state --state RELATED -j ACCEPT
            _iptables -A PRE_DOCKER -i docker0 -o docker0 -j ACCEPT
        fi

        for IPv in '4' '6'; do
            [[ "$IPv" = '4' ]] && _IPTABLES=$IPTABLES IPv=''
            [[ "$IPv" = '6' ]] && _IPTABLES=$IP6TABLES

            ## ACCEPT ALL CONNECTIONS FROM WHITELIST FILE /etc/firewall/ip{6}-whitelist.conf
            for IP in `cat /etc/firewall/ip${IPv}-whitelist.conf | sed 's/\s/_/g' | grep -v "^#"`; do
                $_IPTABLES -A INPUT -s $IP -m state --state NEW -j ACCEPT
                if $enable_docker ; then
                    $_IPTABLES -I PRE_DOCKER -s $IP -m state --state NEW -j ACCEPT
                fi
            done

            ## DROP ALL CONNECTIONS FROM BLACKLIST FILE /etc/firewall/ip{6}-blacklist.conf
            for IP in `cat /etc/firewall/ip${IPv}-blacklist.conf | sed 's/\s/_/g' | grep -v "^#"`; do
                $_IPTABLES -A INPUT -s $IP -m state --state NEW -j DROP
            done

            # ALLOWED PORTS/PROTOCOLS FROM /etc/firewall/services.conf
            cat /etc/firewall/services.conf | grep -v "^#" | while read line; do
                [[ -z "$line" ]] && continue

                # INITIALIZE
                PORT=""
                PROTO=""
                IP="0.0.0.0/0"

                [[ "$IPv" = '6' ]] && '::/0'

                while IFS=' ' read -ra SERVICES; do
                    PORT=`echo ${SERVICES[0]} | cut -d"/" -f1`
                    PROTO=`echo ${SERVICES[0]} | cut -d"/" -f2`
                    if [ ${#SERVICES[@]} == 2 ]; then
                        IP=${SERVICES[1]}
                    fi
                    _iptables -A INPUT -p $PROTO -s $IP --dport $PORT -m state --state NEW -j ACCEPT
                    if $enable_docker ;then
                        _iptables -A PRE_DOCKER -p $PROTO -s $IP --dport $PORT -m state --state NEW -j ACCEPT
                    fi
                done <<< "$line"
            done

        done

        # EXECUTE ALL CUSTOM SCRIPTS IN /etc/firewall/custom
        if [ "$(ls -A /etc/firewall/custom)" ]; then
            for F in /etc/firewall/custom/*; do
                . $F
            done;
        fi


        if $enable_docker ; then
            # Set the default action to REJECT
            _iptables -A PRE_DOCKER -j REJECT
        fi

        #################################################################
        # drop and log invalid packages
        #################################################################

        if $drop_invalid ; then
            _iptables -A INPUT -m state --state INVALID -j invalid_drop
            _iptables -A OUTPUT -m state --state INVALID -j invalid_drop
        fi

        ##################################################################
        # BROADCAST AND MULTICAST
        ##################################################################

        if $drop_broadcast ; then
            _iptables -A INPUT -m pkttype --pkt-type broadcast -j DROP
            _iptables -A INPUT -m pkttype --pkt-type multicast -j DROP
        fi

        ##################################################################
        # PORTSCAN DETECTION
        ##################################################################

        if $drop_portscan ; then
            ## nmap Null scans / no flags
            _iptables -A INPUT -p tcp --tcp-flags ALL NONE -j portscan_drop
            ## nmap FIN stealth scan
            _iptables -A INPUT -p tcp --tcp-flags ALL FIN -j portscan_drop
            ## SYN + FIN
            _iptables -A INPUT -p tcp --tcp-flags SYN,FIN SYN,FIN -j portscan_drop
            ## SYN + RST
            _iptables -A INPUT -p tcp --tcp-flags SYN,RST SYN,RST -j portscan_drop
            ## FIN + RST
            _iptables -A INPUT -p tcp --tcp-flags FIN,RST FIN,RST -j portscan_drop
            ## FIN + URG + PSH
            _iptables -A INPUT -p tcp --tcp-flags ALL FIN,URG,PSH -j portscan_drop
            ## XMAS
            _iptables -A INPUT -p tcp --tcp-flags ALL URG,ACK,PSH,RST,SYN,FIN -j portscan_drop
            ## ALL
            _iptables -A INPUT -p tcp --tcp-flags ALL ALL -j portscan_drop
            ## FIN/PSH/URG without ACK
            _iptables -A INPUT -p tcp --tcp-flags ACK,FIN FIN -j portscan_drop
            _iptables -A INPUT -p tcp --tcp-flags ACK,PSH PSH -j portscan_drop
            _iptables -A INPUT -p tcp --tcp-flags ACK,URG URG -j portscan_drop
        fi

        ##################################################################
        # USEFULL OPTIONS ( ! overwrites sysctl settings ! )
        ##################################################################

        if $secure_redirects ; then
            ## allow only ICMP redirects from our own gateway
            echo 1 > /proc/sys/net/ipv4/conf/all/secure_redirects
            echo 1 > /proc/sys/net/ipv4/conf/default/secure_redirects
        fi

        if $block_redirects ; then
            ## dont accept ICMP redirects
            echo 0 > /proc/sys/net/ipv4/conf/all/accept_redirects
            echo 0 > /proc/sys/net/ipv4/conf/default/accept_redirects
            ## dont sent ICMP redirects
            echo 0 > /proc/sys/net/ipv4/conf/all/send_redirects
            echo 0 > /proc/sys/net/ipv4/conf/default/send_redirects
        fi

        if $ignore_broadcast_icmp ; then
            ## ignore broadcast/multicast ICMP // smurf-attack prevention
            echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts
        fi

        if $ignore_bogus_errors ; then
            ## ignore bogus error responses
            echo 1 > /proc/sys/net/ipv4/icmp_ignore_bogus_error_responses
        fi

        ## dont ignore pings
        echo 0 > /proc/sys/net/ipv4/icmp_echo_ignore_all

        if $block_source_route_packages ; then
            ## allow no source route packages
            echo 0 > /proc/sys/net/ipv4/conf/all/accept_source_route
            echo 0 > /proc/sys/net/ipv4/conf/default/accept_source_route
        fi

        if $block_proxy_arp ; then
            ## we dont want to proxy arp
            echo 0 > /proc/sys/net/ipv4/conf/all/proxy_arp
            echo 0 > /proc/sys/net/ipv4/conf/default/proxy_arp
        fi

        if $enable_syn_cookies ; then
            ## enable syn-cookies // syn-flood prevention
            echo 1 > /proc/sys/net/ipv4/tcp_syncookies
            echo 2048 > /proc/sys/net/ipv4/tcp_max_syn_backlog
            echo 5 > /proc/sys/net/ipv4/tcp_syn_retries
            echo 5 > /proc/sys/net/ipv4/tcp_synack_retries
        fi

        if $enable_reverse_path ; then
            ## enable reverse path filter // RFC1812 // spoofing attack prevention
            echo 1 > /proc/sys/net/ipv4/conf/all/rp_filter
            echo 1 > /proc/sys/net/ipv4/conf/default/rp_filter
        fi

        if $disable_bootp_relay ; then
            ## no relaying of bootp
            echo 0 > /proc/sys/net/ipv4/conf/all/bootp_relay
            echo 0 > /proc/sys/net/ipv4/conf/default/bootp_relay
        fi

        if $disable_martian_loging ; then
            ## do not log martian packets
            echo 0 > /proc/sys/net/ipv4/conf/all/log_martians
            echo 0 > /proc/sys/net/ipv4/conf/default/log_martians
        fi

        if $disable_srr ; then
            ## dont allow SRR
            echo 0 > /proc/sys/net/ipv4/conf/all/accept_source_route
            echo 0 > /proc/sys/net/ipv4/conf/default/accept_source_route
        fi

        if $enable_sack ; then
            ## enable enable_sack
            echo 1 > /proc/sys/net/ipv4/tcp_sack
            echo 1 > /proc/sys/net/ipv4/tcp_dsack
            echo 1 > /proc/sys/net/ipv4/tcp_fack
        fi

        #################################################################
        # IPv6 
        #################################################################

        if $ipv6_loopback_ok ; then
            ## allow on loopback
            $IP6TABLES -A INPUT -i lo -j ACCEPT
            $IP6TABLES -A OUTPUT -o lo -j ACCEPT
        fi

        if $ipv6_drop_all ; then
            ## drop all ip IPv6 traffic
            $IP6TABLES -P INPUT DROP
            $IP6TABLES -P OUTPUT DROP
        fi

        if $ipv6_forwarding ; then
            $IP6TABLES -P FORWARD ACCEPT
        else
            ## drop IPv6 forwarding
            $IP6TABLES -P FORWARD DROP
            ## disable IPv6 forwarding ( ! overwrites sysctl settings ! )
            echo 0 > /proc/sys/net/ipv6/conf/all/forwarding
            echo 0 > /proc/sys/net/ipv6/conf/default/forwarding
        fi

        if $ipv6_disabled ; then
            ## disable IPv6 ( ! overwrites sysctl settings ! )
            echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6
            echo 1 > /proc/sys/net/ipv6/conf/default/disable_ipv6
        fi

        ##################################################################
        # FINAL RULES
        ##################################################################

        ## log all other packages and reject them
        _iptables -A INPUT -j LOG
        _iptables -A INPUT -j REJECT
        
        echo "firewall started"
        ;;

    stop)
        echo "stopping firewall..."
        
        ## delete old rules
        _iptables -F
        _iptables -X
        
        ## allow anything
        _iptables -P INPUT ACCEPT
        _iptables -P OUTPUT ACCEPT
        _iptables -P FORWARD ACCEPT

        echo "firewall stopped"
        ;;

    status)
        echo "##################################################################"
        echo "## FILTER"
        echo "##################################################################"
        $IPTABLES -L -vn
        echo "##################################################################"
        echo "## FILTER IPv6"
        echo "##################################################################"
        $IP6TABLES -L -vn
        echo "##################################################################"
        echo "## NAT"
        echo "##################################################################"
        $IPTABLES -t nat -L -vn
        echo "##################################################################"
        echo "## NAT IPv6"
        echo "##################################################################"
        $IP6TABLES -t nat -L -vn
        echo "##################################################################"
        echo "## MANGLE"
        echo "##################################################################"
        $IPTABLES -t mangle -L -vn
        echo "##################################################################"
        echo "## MANGLE IPv6"
        echo "##################################################################"
        $IP6TABLES -t mangle -L -vn
        ;;

    version)
        echo "Version: 1.2"
        ;;
        
    restart|reload|force-reload)
        $0 stop
        sleep 1
        $0 start
        ;;

      *)
        echo "Your are doing it wrong."
        echo "Syntax: $0 {start|stop|restart|reload|force-reload|status|version}"
        exit 1
        ;;

    esac
